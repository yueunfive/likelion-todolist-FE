{"ast":null,"code":"var _jsxFileName = \"/Users/yueun-oh/Desktop/yueunfive-git/lecture-code/winterlood-react/todolist/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport Header from \"./component/Header\";\nimport TodoEditor from \"./component/TodoEditor\";\nimport TodoList from \"./component/TodoList\";\nimport { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockTodo = [{\n  id: 0,\n  isDone: false,\n  content: \"React 공부하기\",\n  createdDate: new Date().getTime()\n}, {\n  id: 1,\n  isDone: false,\n  content: \"Spring 공부하기\",\n  createdDate: new Date().getTime()\n}, {\n  id: 2,\n  isDone: false,\n  content: \"독서하기\",\n  createdDate: new Date().getTime()\n}];\nexport const DiaryStateContext = React.createContext();\nfunction App() {\n  _s();\n  const idRef = useRef(3); // Ref 객체는 리액트에서 주로 돔을 조작할 때 사용하지만, 컴포넌트의 변수로도 자주 활용한다.\n  const [todo, setTodo] = useState(mockTodo);\n\n  // 아이템 추가 함수\n  const onCreate = content => {\n    const newItem = {\n      id: idRef.current,\n      content,\n      isDone: false,\n      createdDate: new Date().getTime()\n    };\n    setTodo([newItem, ...todo]);\n    idRef.current++;\n  };\n\n  // 아이템 체크 함수\n  const onUpdate = targetId => {\n    setTodo(todo.map(it => it.id === targetId ? {\n      ...it,\n      isDone: !it.isDone\n    } : it));\n  };\n\n  // 아이템 삭제 함수\n  const onDelete = targetId => {\n    setTodo(todo.filter(it => it.id !== targetId));\n  };\n\n  // 아이템 수정 함수\n  const onEdit = (targetId, newContent) => {\n    setTodo(todo.map(it => it.id === targetId ? {\n      ...it,\n      content: newContent\n    } : it));\n  };\n  return /*#__PURE__*/_jsxDEV(DiaryStateContext.Provider, {\n    value: data,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TodoEditor, {\n        onCreate: onCreate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n        todo: todo,\n        onUpdate: onUpdate,\n        onDelete: onDelete,\n        onEdit: onEdit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"pJPnGOtoqkSqDmEJ6Nq8lF9DMCk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","TodoEditor","TodoList","useState","useRef","jsxDEV","_jsxDEV","mockTodo","id","isDone","content","createdDate","Date","getTime","DiaryStateContext","React","createContext","App","_s","idRef","todo","setTodo","onCreate","newItem","current","onUpdate","targetId","map","it","onDelete","filter","onEdit","newContent","Provider","value","data","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yueun-oh/Desktop/yueunfive-git/lecture-code/winterlood-react/todolist/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport Header from \"./component/Header\";\nimport TodoEditor from \"./component/TodoEditor\";\nimport TodoList from \"./component/TodoList\";\nimport { useState, useRef } from \"react\";\n\nconst mockTodo = [\n  {\n    id: 0,\n    isDone: false,\n    content: \"React 공부하기\",\n    createdDate: new Date().getTime(),\n  },\n  {\n    id: 1,\n    isDone: false,\n    content: \"Spring 공부하기\",\n    createdDate: new Date().getTime(),\n  },\n  {\n    id: 2,\n    isDone: false,\n    content: \"독서하기\",\n    createdDate: new Date().getTime(),\n  },\n];\n\nexport const DiaryStateContext = React.createContext();\n\nfunction App() {\n  const idRef = useRef(3); // Ref 객체는 리액트에서 주로 돔을 조작할 때 사용하지만, 컴포넌트의 변수로도 자주 활용한다.\n  const [todo, setTodo] = useState(mockTodo);\n\n  // 아이템 추가 함수\n  const onCreate = (content) => {\n    const newItem = {\n      id: idRef.current,\n      content,\n      isDone: false,\n      createdDate: new Date().getTime(),\n    };\n    setTodo([newItem, ...todo]);\n    idRef.current++;\n  };\n\n  // 아이템 체크 함수\n  const onUpdate = (targetId) => {\n    setTodo(\n      todo.map((it) =>\n        it.id === targetId ? { ...it, isDone: !it.isDone } : it\n      )\n    );\n  };\n\n  // 아이템 삭제 함수\n  const onDelete = (targetId) => {\n    setTodo(todo.filter((it) => it.id !== targetId));\n  };\n\n  // 아이템 수정 함수\n  const onEdit = (targetId, newContent) => {\n    setTodo(\n      todo.map((it) =>\n        it.id === targetId ? { ...it, content: newContent } : it\n      )\n    );\n  };\n\n  return (\n    <DiaryStateContext.Provider value={data}>\n      <div className=\"App\">\n        <Header />\n        <TodoEditor onCreate={onCreate} />\n        <TodoList\n          todo={todo}\n          onUpdate={onUpdate}\n          onDelete={onDelete}\n          onEdit={onEdit}\n        />\n      </div>\n    </DiaryStateContext.Provider>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}