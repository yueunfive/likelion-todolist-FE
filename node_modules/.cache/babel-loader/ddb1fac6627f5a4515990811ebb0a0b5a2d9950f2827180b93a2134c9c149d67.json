{"ast":null,"code":"var _jsxFileName = \"/Users/yueun-oh/Desktop/yueunfive-git/lecture-code/winterlood-react/todolist/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport Header from \"./component/Header\";\nimport TodoEditor from \"./component/TodoEditor\";\nimport Todolist from \"./component/Todolist\";\nimport { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockTodo = [{\n  id: 0,\n  isDone: false,\n  content: \"개발 공부하기\",\n  createdDate: new Date().getTime()\n}, {\n  id: 1,\n  isDone: false,\n  content: \"영어 공부하기\",\n  createdDate: new Date().getTime()\n}, {\n  id: 2,\n  isDone: false,\n  content: \"독서하기\",\n  createdDate: new Date().getTime()\n}];\nfunction App() {\n  _s();\n  const idRef = useRef(3); // Ref 객체는 리액트에서 주로 돔을 조작할 때 사용하지만, 컴포넌트의 변수로도 자주 활용한다.\n  const [todo, setTodo] = useState(mockTodo);\n  const onCreate = content => {\n    const newItem = {\n      id: idRef.current,\n      content,\n      isDone: false,\n      createdDate: new Date().getTime()\n    };\n    setTodo([newItem, ...todo]);\n    idRef.current++;\n  };\n  const onUpdate = targetId => {\n    setTodo(todo.map(it => {\n      if (it.id === targetId) {\n        return {\n          ...it,\n          isDone: !it.isDone\n        };\n      } else {\n        return it;\n      }\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoEditor, {\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Todolist, {\n      todo: todo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"pJPnGOtoqkSqDmEJ6Nq8lF9DMCk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","TodoEditor","Todolist","useState","useRef","jsxDEV","_jsxDEV","mockTodo","id","isDone","content","createdDate","Date","getTime","App","_s","idRef","todo","setTodo","onCreate","newItem","current","onUpdate","targetId","map","it","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yueun-oh/Desktop/yueunfive-git/lecture-code/winterlood-react/todolist/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport Header from \"./component/Header\";\nimport TodoEditor from \"./component/TodoEditor\";\nimport Todolist from \"./component/Todolist\";\nimport { useState, useRef } from \"react\";\n\nconst mockTodo = [\n  {\n    id: 0,\n    isDone: false,\n    content: \"개발 공부하기\",\n    createdDate: new Date().getTime(),\n  },\n  {\n    id: 1,\n    isDone: false,\n    content: \"영어 공부하기\",\n    createdDate: new Date().getTime(),\n  },\n  {\n    id: 2,\n    isDone: false,\n    content: \"독서하기\",\n    createdDate: new Date().getTime(),\n  },\n];\n\nfunction App() {\n  const idRef = useRef(3); // Ref 객체는 리액트에서 주로 돔을 조작할 때 사용하지만, 컴포넌트의 변수로도 자주 활용한다.\n  const [todo, setTodo] = useState(mockTodo);\n\n  const onCreate = (content) => {\n    const newItem = {\n      id: idRef.current,\n      content,\n      isDone: false,\n      createdDate: new Date().getTime(),\n    };\n    setTodo([newItem, ...todo]);\n    idRef.current++;\n  };\n\n  const onUpdate = (targetId) => {\n    setTodo(\n      todo.map((it) => {\n        if (it.id === targetId) {\n          return {\n            ...it,\n            isDone: !it.isDone,\n          };\n        } else {\n          return it;\n        }\n      })\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <TodoEditor onCreate={onCreate} />\n      <Todolist todo={todo} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,MAAM,MAAM,oBAAoB;AACvC,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,SAASC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,QAAQ,GAAG,CACf;EACEC,EAAE,EAAE,CAAC;EACLC,MAAM,EAAE,KAAK;EACbC,OAAO,EAAE,SAAS;EAClBC,WAAW,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC;AAClC,CAAC,EACD;EACEL,EAAE,EAAE,CAAC;EACLC,MAAM,EAAE,KAAK;EACbC,OAAO,EAAE,SAAS;EAClBC,WAAW,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC;AAClC,CAAC,EACD;EACEL,EAAE,EAAE,CAAC;EACLC,MAAM,EAAE,KAAK;EACbC,OAAO,EAAE,MAAM;EACfC,WAAW,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC;AAClC,CAAC,CACF;AAED,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,KAAK,GAAGZ,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EACzB,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAACI,QAAQ,CAAC;EAE1C,MAAMY,QAAQ,GAAIT,OAAO,IAAK;IAC5B,MAAMU,OAAO,GAAG;MACdZ,EAAE,EAAEQ,KAAK,CAACK,OAAO;MACjBX,OAAO;MACPD,MAAM,EAAE,KAAK;MACbE,WAAW,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC;IAClC,CAAC;IACDK,OAAO,CAAC,CAACE,OAAO,EAAE,GAAGH,IAAI,CAAC,CAAC;IAC3BD,KAAK,CAACK,OAAO,EAAE;EACjB,CAAC;EAED,MAAMC,QAAQ,GAAIC,QAAQ,IAAK;IAC7BL,OAAO,CACLD,IAAI,CAACO,GAAG,CAAEC,EAAE,IAAK;MACf,IAAIA,EAAE,CAACjB,EAAE,KAAKe,QAAQ,EAAE;QACtB,OAAO;UACL,GAAGE,EAAE;UACLhB,MAAM,EAAE,CAACgB,EAAE,CAAChB;QACd,CAAC;MACH,CAAC,MAAM;QACL,OAAOgB,EAAE;MACX;IACF,CAAC,CACH,CAAC;EACH,CAAC;EAED,oBACEnB,OAAA;IAAKoB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBrB,OAAA,CAACN,MAAM;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVzB,OAAA,CAACL,UAAU;MAACkB,QAAQ,EAAEA;IAAS;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClCzB,OAAA,CAACJ,QAAQ;MAACe,IAAI,EAAEA;IAAK;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrB,CAAC;AAEV;AAAChB,EAAA,CArCQD,GAAG;AAAAkB,EAAA,GAAHlB,GAAG;AAuCZ,eAAeA,GAAG;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}