{"ast":null,"code":"var _jsxFileName = \"/Users/yueun-oh/Desktop/client/src/pages/TodoPage.jsx\",\n  _s = $RefreshSig$();\nimport Header from \"../component/Header\";\nimport TodoEditor from \"../component/TodoEditor\";\nimport TodoList from \"../component/TodoList\";\nimport styles from \"./TodoPage.module.css\";\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TodoPage() {\n  _s();\n  const {\n    dateId\n  } = useParams(); // url의 \":dateId\" 부분에서 날짜 따옴\n  const [todo, setTodo] = useState([]); // 일정 데이터\n  const userId = localStorage.getItem(\"userId\");\n\n  // 일정 받아오기\n  const resTodo = async () => {\n    const month = parseInt(localStorage.getItem(\"month\")); // parseInt : 문자열 -> 숫자\n    const day = parseInt(localStorage.getItem(\"day\"));\n    axios.get(`/api/plans/${userId}?month=${month}&day=${day}`).then(response => {\n      console.log(response.data);\n      setTodo(response.data);\n    }).catch(error => {\n      console.error(\"에러 발생:\", error);\n    });\n  };\n  useEffect(() => {\n    resTodo();\n  }, []); // 마운트 될 때 한 번만 실행해서 초기값 넣기\n\n  // 아이템 추가 함수(일정 작성)\n  const onCreate = async content => {\n    try {\n      const response = await axios.post(`/api/plans/${userId}`, {\n        date: dateId,\n        content: content\n      });\n      setTodo([response.data, ...todo]);\n    } catch (error) {\n      console.error(\"POST 요청 실패:\", error);\n    }\n  };\n\n  // 아이템 체크 함수(일정 완료)\n  // 현재 체크 상태의 반대 상태를 요청하면 그렇게 바꿔주도록 하자\n  const onCheck = async targetId => {\n    const targetIndex = todo.findIndex(it => it._id === targetId);\n    try {\n      const response = await axios.patch(`/api/plans/${userId}/${targetId}/check`, {\n        is_checked: !todo[targetIndex].is_checked\n      });\n      const updatedTodo = [...todo];\n      updatedTodo[targetIndex].is_checked = response.data.is_checked;\n      setTodo(updatedTodo); // 클라이언트 데이터 업데이트\n    } catch (error) {\n      console.error(\"에러 발생:\", error);\n    }\n  };\n\n  // 아이템 삭제 함수(일정 삭제)\n  const onDelete = async targetId => {\n    try {\n      await axios.delete(`/api/plans/${userId}/${targetId}`);\n      setTodo(todo.filter(it => it._id !== targetId));\n    } catch (error) {\n      console.error(\"에러 발생:\", error);\n    }\n  };\n\n  // 아이템 수정 함수(일정 수정)\n  const onEdit = async (targetId, newContent) => {\n    try {\n      await axios.patch(`/api/plans/${userId}/${targetId}`, {\n        content: newContent\n      });\n      setTodo(todo.map(it => it._id === targetId ? {\n        ...it,\n        content: newContent\n      } : it));\n    } catch (error) {\n      console.error(\"에러 발생:\", error);\n    }\n  };\n\n  // 일정 후기(이모지)\n  const onReview = async (targetId, newEmoji) => {\n    try {\n      await axios.patch(`/api/plans/${userId}/${targetId}/reviews`, {\n        emoji: newEmoji\n      });\n      setTodo(todo.map(it => it._id === targetId ? {\n        ...it,\n        emoji: newEmoji\n      } : it));\n    } catch (error) {\n      console.error(\"에러 발생:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.TodoPage,\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      dateId: dateId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoEditor, {\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n      todo: todo,\n      onCheck: onCheck,\n      onDelete: onDelete,\n      onEdit: onEdit,\n      onReview: onReview\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n_s(TodoPage, \"reMbiEWv/hBtki9kxvhrNftBj7M=\", false, function () {\n  return [useParams];\n});\n_c = TodoPage;\nexport default TodoPage;\nvar _c;\n$RefreshReg$(_c, \"TodoPage\");","map":{"version":3,"names":["Header","TodoEditor","TodoList","styles","useState","useEffect","useParams","axios","jsxDEV","_jsxDEV","TodoPage","_s","dateId","todo","setTodo","userId","localStorage","getItem","resTodo","month","parseInt","day","get","then","response","console","log","data","catch","error","onCreate","content","post","date","onCheck","targetId","targetIndex","findIndex","it","_id","patch","is_checked","updatedTodo","onDelete","delete","filter","onEdit","newContent","map","onReview","newEmoji","emoji","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yueun-oh/Desktop/client/src/pages/TodoPage.jsx"],"sourcesContent":["import Header from \"../component/Header\";\nimport TodoEditor from \"../component/TodoEditor\";\nimport TodoList from \"../component/TodoList\";\nimport styles from \"./TodoPage.module.css\";\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\n\nfunction TodoPage() {\n  const { dateId } = useParams(); // url의 \":dateId\" 부분에서 날짜 따옴\n  const [todo, setTodo] = useState([]); // 일정 데이터\n  const userId = localStorage.getItem(\"userId\");\n\n  // 일정 받아오기\n  const resTodo = async () => {\n    const month = parseInt(localStorage.getItem(\"month\")); // parseInt : 문자열 -> 숫자\n    const day = parseInt(localStorage.getItem(\"day\"));\n    axios\n      .get(`/api/plans/${userId}?month=${month}&day=${day}`)\n      .then((response) => {\n        console.log(response.data);\n        setTodo(response.data);\n      })\n      .catch((error) => {\n        console.error(\"에러 발생:\", error);\n      });\n  };\n\n  useEffect(() => {\n    resTodo();\n  }, []); // 마운트 될 때 한 번만 실행해서 초기값 넣기\n\n  // 아이템 추가 함수(일정 작성)\n  const onCreate = async (content) => {\n    try {\n      const response = await axios.post(`/api/plans/${userId}`, {\n        date: dateId,\n        content: content,\n      });\n      setTodo([response.data, ...todo]);\n    } catch (error) {\n      console.error(\"POST 요청 실패:\", error);\n    }\n  };\n\n  // 아이템 체크 함수(일정 완료)\n  // 현재 체크 상태의 반대 상태를 요청하면 그렇게 바꿔주도록 하자\n  const onCheck = async (targetId) => {\n    const targetIndex = todo.findIndex((it) => it._id === targetId);\n\n    try {\n      const response = await axios.patch(\n        `/api/plans/${userId}/${targetId}/check`,\n        { is_checked: !todo[targetIndex].is_checked }\n      );\n\n      const updatedTodo = [...todo];\n      updatedTodo[targetIndex].is_checked = response.data.is_checked;\n\n      setTodo(updatedTodo); // 클라이언트 데이터 업데이트\n    } catch (error) {\n      console.error(\"에러 발생:\", error);\n    }\n  };\n\n  // 아이템 삭제 함수(일정 삭제)\n  const onDelete = async (targetId) => {\n    try {\n      await axios.delete(`/api/plans/${userId}/${targetId}`);\n      setTodo(todo.filter((it) => it._id !== targetId));\n    } catch (error) {\n      console.error(\"에러 발생:\", error);\n    }\n  };\n\n  // 아이템 수정 함수(일정 수정)\n  const onEdit = async (targetId, newContent) => {\n    try {\n      await axios.patch(`/api/plans/${userId}/${targetId}`, {\n        content: newContent,\n      });\n      setTodo(\n        todo.map((it) =>\n          it._id === targetId ? { ...it, content: newContent } : it\n        )\n      );\n    } catch (error) {\n      console.error(\"에러 발생:\", error);\n    }\n  };\n\n  // 일정 후기(이모지)\n  const onReview = async (targetId, newEmoji) => {\n    try {\n      await axios.patch(`/api/plans/${userId}/${targetId}/reviews`, {\n        emoji: newEmoji,\n      });\n      setTodo(\n        todo.map((it) =>\n          it._id === targetId ? { ...it, emoji: newEmoji } : it\n        )\n      );\n    } catch (error) {\n      console.error(\"에러 발생:\", error);\n    }\n  };\n\n  return (\n    <div className={styles.TodoPage}>\n      <Header dateId={dateId} />\n      <TodoEditor onCreate={onCreate} />\n      <TodoList\n        todo={todo}\n        onCheck={onCheck}\n        onDelete={onDelete}\n        onEdit={onEdit}\n        onReview={onReview}\n      />\n    </div>\n  );\n}\n\nexport default TodoPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}